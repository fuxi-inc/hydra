// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// UserServiceClient is the client API for UserService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type UserServiceClient interface {
	// List available namespaces before user registration
	AvailableNamespace(ctx context.Context, in *GeneralPaginationRequest, opts ...grpc.CallOption) (*NamespacesResponse, error)
	// User registration
	ApplyRegistrationCode(ctx context.Context, in *ApplyRegistrationCodeRequest, opts ...grpc.CallOption) (*ApplyRegistrationCodeResponse, error)
	Register(ctx context.Context, in *UserRegistrationRequest, opts ...grpc.CallOption) (*UserRegistrationResponse, error)
	Authenticate(ctx context.Context, in *UserAuthenticationRequest, opts ...grpc.CallOption) (*UserAuthenticationResponse, error)
	Unregister(ctx context.Context, in *UserUnregisterRequest, opts ...grpc.CallOption) (*GeneralResponse, error)
	// License management
	ListLicense(ctx context.Context, in *LicenseManagementRequest, opts ...grpc.CallOption) (*LicensesResponse, error)
	CreateLicense(ctx context.Context, in *LicenseManagementRequest, opts ...grpc.CallOption) (*LicenseResponse, error)
	RevokeLicense(ctx context.Context, in *RevokeLicenseRequest, opts ...grpc.CallOption) (*GeneralResponse, error)
}

type userServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewUserServiceClient(cc grpc.ClientConnInterface) UserServiceClient {
	return &userServiceClient{cc}
}

func (c *userServiceClient) AvailableNamespace(ctx context.Context, in *GeneralPaginationRequest, opts ...grpc.CallOption) (*NamespacesResponse, error) {
	out := new(NamespacesResponse)
	err := c.cc.Invoke(ctx, "/v1.UserService/AvailableNamespace", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) ApplyRegistrationCode(ctx context.Context, in *ApplyRegistrationCodeRequest, opts ...grpc.CallOption) (*ApplyRegistrationCodeResponse, error) {
	out := new(ApplyRegistrationCodeResponse)
	err := c.cc.Invoke(ctx, "/v1.UserService/ApplyRegistrationCode", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) Register(ctx context.Context, in *UserRegistrationRequest, opts ...grpc.CallOption) (*UserRegistrationResponse, error) {
	out := new(UserRegistrationResponse)
	err := c.cc.Invoke(ctx, "/v1.UserService/Register", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) Authenticate(ctx context.Context, in *UserAuthenticationRequest, opts ...grpc.CallOption) (*UserAuthenticationResponse, error) {
	out := new(UserAuthenticationResponse)
	err := c.cc.Invoke(ctx, "/v1.UserService/Authenticate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) Unregister(ctx context.Context, in *UserUnregisterRequest, opts ...grpc.CallOption) (*GeneralResponse, error) {
	out := new(GeneralResponse)
	err := c.cc.Invoke(ctx, "/v1.UserService/Unregister", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) ListLicense(ctx context.Context, in *LicenseManagementRequest, opts ...grpc.CallOption) (*LicensesResponse, error) {
	out := new(LicensesResponse)
	err := c.cc.Invoke(ctx, "/v1.UserService/ListLicense", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) CreateLicense(ctx context.Context, in *LicenseManagementRequest, opts ...grpc.CallOption) (*LicenseResponse, error) {
	out := new(LicenseResponse)
	err := c.cc.Invoke(ctx, "/v1.UserService/CreateLicense", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) RevokeLicense(ctx context.Context, in *RevokeLicenseRequest, opts ...grpc.CallOption) (*GeneralResponse, error) {
	out := new(GeneralResponse)
	err := c.cc.Invoke(ctx, "/v1.UserService/RevokeLicense", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// UserServiceServer is the server API for UserService service.
// All implementations must embed UnimplementedUserServiceServer
// for forward compatibility
type UserServiceServer interface {
	// List available namespaces before user registration
	AvailableNamespace(context.Context, *GeneralPaginationRequest) (*NamespacesResponse, error)
	// User registration
	ApplyRegistrationCode(context.Context, *ApplyRegistrationCodeRequest) (*ApplyRegistrationCodeResponse, error)
	Register(context.Context, *UserRegistrationRequest) (*UserRegistrationResponse, error)
	Authenticate(context.Context, *UserAuthenticationRequest) (*UserAuthenticationResponse, error)
	Unregister(context.Context, *UserUnregisterRequest) (*GeneralResponse, error)
	// License management
	ListLicense(context.Context, *LicenseManagementRequest) (*LicensesResponse, error)
	CreateLicense(context.Context, *LicenseManagementRequest) (*LicenseResponse, error)
	RevokeLicense(context.Context, *RevokeLicenseRequest) (*GeneralResponse, error)
	mustEmbedUnimplementedUserServiceServer()
}

// UnimplementedUserServiceServer must be embedded to have forward compatible implementations.
type UnimplementedUserServiceServer struct {
}

func (UnimplementedUserServiceServer) AvailableNamespace(context.Context, *GeneralPaginationRequest) (*NamespacesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AvailableNamespace not implemented")
}
func (UnimplementedUserServiceServer) ApplyRegistrationCode(context.Context, *ApplyRegistrationCodeRequest) (*ApplyRegistrationCodeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ApplyRegistrationCode not implemented")
}
func (UnimplementedUserServiceServer) Register(context.Context, *UserRegistrationRequest) (*UserRegistrationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Register not implemented")
}
func (UnimplementedUserServiceServer) Authenticate(context.Context, *UserAuthenticationRequest) (*UserAuthenticationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Authenticate not implemented")
}
func (UnimplementedUserServiceServer) Unregister(context.Context, *UserUnregisterRequest) (*GeneralResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Unregister not implemented")
}
func (UnimplementedUserServiceServer) ListLicense(context.Context, *LicenseManagementRequest) (*LicensesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListLicense not implemented")
}
func (UnimplementedUserServiceServer) CreateLicense(context.Context, *LicenseManagementRequest) (*LicenseResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateLicense not implemented")
}
func (UnimplementedUserServiceServer) RevokeLicense(context.Context, *RevokeLicenseRequest) (*GeneralResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RevokeLicense not implemented")
}
func (UnimplementedUserServiceServer) mustEmbedUnimplementedUserServiceServer() {}

// UnsafeUserServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to UserServiceServer will
// result in compilation errors.
type UnsafeUserServiceServer interface {
	mustEmbedUnimplementedUserServiceServer()
}

func RegisterUserServiceServer(s grpc.ServiceRegistrar, srv UserServiceServer) {
	s.RegisterService(&UserService_ServiceDesc, srv)
}

func _UserService_AvailableNamespace_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GeneralPaginationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).AvailableNamespace(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.UserService/AvailableNamespace",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).AvailableNamespace(ctx, req.(*GeneralPaginationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_ApplyRegistrationCode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ApplyRegistrationCodeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).ApplyRegistrationCode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.UserService/ApplyRegistrationCode",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).ApplyRegistrationCode(ctx, req.(*ApplyRegistrationCodeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_Register_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserRegistrationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).Register(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.UserService/Register",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).Register(ctx, req.(*UserRegistrationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_Authenticate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserAuthenticationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).Authenticate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.UserService/Authenticate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).Authenticate(ctx, req.(*UserAuthenticationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_Unregister_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserUnregisterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).Unregister(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.UserService/Unregister",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).Unregister(ctx, req.(*UserUnregisterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_ListLicense_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LicenseManagementRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).ListLicense(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.UserService/ListLicense",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).ListLicense(ctx, req.(*LicenseManagementRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_CreateLicense_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LicenseManagementRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).CreateLicense(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.UserService/CreateLicense",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).CreateLicense(ctx, req.(*LicenseManagementRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_RevokeLicense_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RevokeLicenseRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).RevokeLicense(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.UserService/RevokeLicense",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).RevokeLicense(ctx, req.(*RevokeLicenseRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// UserService_ServiceDesc is the grpc.ServiceDesc for UserService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var UserService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "v1.UserService",
	HandlerType: (*UserServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AvailableNamespace",
			Handler:    _UserService_AvailableNamespace_Handler,
		},
		{
			MethodName: "ApplyRegistrationCode",
			Handler:    _UserService_ApplyRegistrationCode_Handler,
		},
		{
			MethodName: "Register",
			Handler:    _UserService_Register_Handler,
		},
		{
			MethodName: "Authenticate",
			Handler:    _UserService_Authenticate_Handler,
		},
		{
			MethodName: "Unregister",
			Handler:    _UserService_Unregister_Handler,
		},
		{
			MethodName: "ListLicense",
			Handler:    _UserService_ListLicense_Handler,
		},
		{
			MethodName: "CreateLicense",
			Handler:    _UserService_CreateLicense_Handler,
		},
		{
			MethodName: "RevokeLicense",
			Handler:    _UserService_RevokeLicense_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "magnolia.proto",
}

// EntropyServiceClient is the client API for EntropyService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type EntropyServiceClient interface {
	// For TLD, when we using HLF, it seems like the channel in HLF.
	AvailableNamespace(ctx context.Context, in *GeneralPaginationRequest, opts ...grpc.CallOption) (*NamespacesResponse, error)
	CurrentNamespace(ctx context.Context, in *GeneralRequest, opts ...grpc.CallOption) (*NamespaceResponse, error)
	ActivateNamespace(ctx context.Context, in *NamespaceRequest, opts ...grpc.CallOption) (*GeneralResponse, error)
	// For Domain
	CreateDomain(ctx context.Context, in *CreateDomainRequest, opts ...grpc.CallOption) (*GeneralResponse, error)
	DeleteDomain(ctx context.Context, in *DomainRequest, opts ...grpc.CallOption) (*GeneralResponse, error)
	GetDomain(ctx context.Context, in *DomainRequest, opts ...grpc.CallOption) (*DomainResponse, error)
	ListDomain(ctx context.Context, in *ListDomainRequest, opts ...grpc.CallOption) (*DomainsResponse, error)
	// For DNS RR
	AddDomainResolutionRecord(ctx context.Context, in *CreateDomainResolutionRecordRequest, opts ...grpc.CallOption) (*DomainResolutionRecordResponse, error)
	UpdateDomainResolutionRecord(ctx context.Context, in *UpdateDomainResolutionRecordRequest, opts ...grpc.CallOption) (*GeneralResponse, error)
	DeleteDomainResolutionRecord(ctx context.Context, in *DomainResolutionRecordRequest, opts ...grpc.CallOption) (*GeneralResponse, error)
	GetDomainResolutionRecord(ctx context.Context, in *DomainResolutionRecordRequest, opts ...grpc.CallOption) (*DomainResolutionRecordResponse, error)
	FindDomainResolutionRecord(ctx context.Context, in *FindDomainResolutionRecordRequest, opts ...grpc.CallOption) (*DomainResolutionRecordsResponse, error)
	// For Identifier
	CreateIdentityIdentifier(ctx context.Context, in *CreateIdentityIdentifierRequest, opts ...grpc.CallOption) (*IdentityIdentifierResponse, error)
	DeleteIdentityIdentifier(ctx context.Context, in *IdentityIdentifierRequest, opts ...grpc.CallOption) (*GeneralResponse, error)
	GetIdentityIdentifier(ctx context.Context, in *IdentityIdentifierRequest, opts ...grpc.CallOption) (*IdentityIdentifierResponse, error)
	// For Data Identifier
	CreateDataIdentifier(ctx context.Context, in *CreateDataIdentifierRequest, opts ...grpc.CallOption) (*DataIdentifierResponse, error)
	DeleteDataIdentifier(ctx context.Context, in *DataIdentifierRequest, opts ...grpc.CallOption) (*GeneralResponse, error)
	GetDataIdentifier(ctx context.Context, in *DataIdentifierRequest, opts ...grpc.CallOption) (*DataIdentifierResponse, error)
	FindDataIdentifierByMetadata(ctx context.Context, in *FindDataIdentifierByMetadataRequest, opts ...grpc.CallOption) (*DataIdentifiersResponse, error)
	FindDataIdentifierByTag(ctx context.Context, in *FindDataIdentifierByTagRequest, opts ...grpc.CallOption) (*DataIdentifiersResponse, error)
}

type entropyServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewEntropyServiceClient(cc grpc.ClientConnInterface) EntropyServiceClient {
	return &entropyServiceClient{cc}
}

func (c *entropyServiceClient) AvailableNamespace(ctx context.Context, in *GeneralPaginationRequest, opts ...grpc.CallOption) (*NamespacesResponse, error) {
	out := new(NamespacesResponse)
	err := c.cc.Invoke(ctx, "/v1.EntropyService/AvailableNamespace", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *entropyServiceClient) CurrentNamespace(ctx context.Context, in *GeneralRequest, opts ...grpc.CallOption) (*NamespaceResponse, error) {
	out := new(NamespaceResponse)
	err := c.cc.Invoke(ctx, "/v1.EntropyService/CurrentNamespace", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *entropyServiceClient) ActivateNamespace(ctx context.Context, in *NamespaceRequest, opts ...grpc.CallOption) (*GeneralResponse, error) {
	out := new(GeneralResponse)
	err := c.cc.Invoke(ctx, "/v1.EntropyService/ActivateNamespace", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *entropyServiceClient) CreateDomain(ctx context.Context, in *CreateDomainRequest, opts ...grpc.CallOption) (*GeneralResponse, error) {
	out := new(GeneralResponse)
	err := c.cc.Invoke(ctx, "/v1.EntropyService/CreateDomain", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *entropyServiceClient) DeleteDomain(ctx context.Context, in *DomainRequest, opts ...grpc.CallOption) (*GeneralResponse, error) {
	out := new(GeneralResponse)
	err := c.cc.Invoke(ctx, "/v1.EntropyService/DeleteDomain", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *entropyServiceClient) GetDomain(ctx context.Context, in *DomainRequest, opts ...grpc.CallOption) (*DomainResponse, error) {
	out := new(DomainResponse)
	err := c.cc.Invoke(ctx, "/v1.EntropyService/GetDomain", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *entropyServiceClient) ListDomain(ctx context.Context, in *ListDomainRequest, opts ...grpc.CallOption) (*DomainsResponse, error) {
	out := new(DomainsResponse)
	err := c.cc.Invoke(ctx, "/v1.EntropyService/ListDomain", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *entropyServiceClient) AddDomainResolutionRecord(ctx context.Context, in *CreateDomainResolutionRecordRequest, opts ...grpc.CallOption) (*DomainResolutionRecordResponse, error) {
	out := new(DomainResolutionRecordResponse)
	err := c.cc.Invoke(ctx, "/v1.EntropyService/AddDomainResolutionRecord", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *entropyServiceClient) UpdateDomainResolutionRecord(ctx context.Context, in *UpdateDomainResolutionRecordRequest, opts ...grpc.CallOption) (*GeneralResponse, error) {
	out := new(GeneralResponse)
	err := c.cc.Invoke(ctx, "/v1.EntropyService/UpdateDomainResolutionRecord", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *entropyServiceClient) DeleteDomainResolutionRecord(ctx context.Context, in *DomainResolutionRecordRequest, opts ...grpc.CallOption) (*GeneralResponse, error) {
	out := new(GeneralResponse)
	err := c.cc.Invoke(ctx, "/v1.EntropyService/DeleteDomainResolutionRecord", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *entropyServiceClient) GetDomainResolutionRecord(ctx context.Context, in *DomainResolutionRecordRequest, opts ...grpc.CallOption) (*DomainResolutionRecordResponse, error) {
	out := new(DomainResolutionRecordResponse)
	err := c.cc.Invoke(ctx, "/v1.EntropyService/GetDomainResolutionRecord", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *entropyServiceClient) FindDomainResolutionRecord(ctx context.Context, in *FindDomainResolutionRecordRequest, opts ...grpc.CallOption) (*DomainResolutionRecordsResponse, error) {
	out := new(DomainResolutionRecordsResponse)
	err := c.cc.Invoke(ctx, "/v1.EntropyService/FindDomainResolutionRecord", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *entropyServiceClient) CreateIdentityIdentifier(ctx context.Context, in *CreateIdentityIdentifierRequest, opts ...grpc.CallOption) (*IdentityIdentifierResponse, error) {
	out := new(IdentityIdentifierResponse)
	err := c.cc.Invoke(ctx, "/v1.EntropyService/CreateIdentityIdentifier", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *entropyServiceClient) DeleteIdentityIdentifier(ctx context.Context, in *IdentityIdentifierRequest, opts ...grpc.CallOption) (*GeneralResponse, error) {
	out := new(GeneralResponse)
	err := c.cc.Invoke(ctx, "/v1.EntropyService/DeleteIdentityIdentifier", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *entropyServiceClient) GetIdentityIdentifier(ctx context.Context, in *IdentityIdentifierRequest, opts ...grpc.CallOption) (*IdentityIdentifierResponse, error) {
	out := new(IdentityIdentifierResponse)
	err := c.cc.Invoke(ctx, "/v1.EntropyService/GetIdentityIdentifier", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *entropyServiceClient) CreateDataIdentifier(ctx context.Context, in *CreateDataIdentifierRequest, opts ...grpc.CallOption) (*DataIdentifierResponse, error) {
	out := new(DataIdentifierResponse)
	err := c.cc.Invoke(ctx, "/v1.EntropyService/CreateDataIdentifier", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *entropyServiceClient) DeleteDataIdentifier(ctx context.Context, in *DataIdentifierRequest, opts ...grpc.CallOption) (*GeneralResponse, error) {
	out := new(GeneralResponse)
	err := c.cc.Invoke(ctx, "/v1.EntropyService/DeleteDataIdentifier", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *entropyServiceClient) GetDataIdentifier(ctx context.Context, in *DataIdentifierRequest, opts ...grpc.CallOption) (*DataIdentifierResponse, error) {
	out := new(DataIdentifierResponse)
	err := c.cc.Invoke(ctx, "/v1.EntropyService/GetDataIdentifier", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *entropyServiceClient) FindDataIdentifierByMetadata(ctx context.Context, in *FindDataIdentifierByMetadataRequest, opts ...grpc.CallOption) (*DataIdentifiersResponse, error) {
	out := new(DataIdentifiersResponse)
	err := c.cc.Invoke(ctx, "/v1.EntropyService/FindDataIdentifierByMetadata", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *entropyServiceClient) FindDataIdentifierByTag(ctx context.Context, in *FindDataIdentifierByTagRequest, opts ...grpc.CallOption) (*DataIdentifiersResponse, error) {
	out := new(DataIdentifiersResponse)
	err := c.cc.Invoke(ctx, "/v1.EntropyService/FindDataIdentifierByTag", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// EntropyServiceServer is the server API for EntropyService service.
// All implementations must embed UnimplementedEntropyServiceServer
// for forward compatibility
type EntropyServiceServer interface {
	// For TLD, when we using HLF, it seems like the channel in HLF.
	AvailableNamespace(context.Context, *GeneralPaginationRequest) (*NamespacesResponse, error)
	CurrentNamespace(context.Context, *GeneralRequest) (*NamespaceResponse, error)
	ActivateNamespace(context.Context, *NamespaceRequest) (*GeneralResponse, error)
	// For Domain
	CreateDomain(context.Context, *CreateDomainRequest) (*GeneralResponse, error)
	DeleteDomain(context.Context, *DomainRequest) (*GeneralResponse, error)
	GetDomain(context.Context, *DomainRequest) (*DomainResponse, error)
	ListDomain(context.Context, *ListDomainRequest) (*DomainsResponse, error)
	// For DNS RR
	AddDomainResolutionRecord(context.Context, *CreateDomainResolutionRecordRequest) (*DomainResolutionRecordResponse, error)
	UpdateDomainResolutionRecord(context.Context, *UpdateDomainResolutionRecordRequest) (*GeneralResponse, error)
	DeleteDomainResolutionRecord(context.Context, *DomainResolutionRecordRequest) (*GeneralResponse, error)
	GetDomainResolutionRecord(context.Context, *DomainResolutionRecordRequest) (*DomainResolutionRecordResponse, error)
	FindDomainResolutionRecord(context.Context, *FindDomainResolutionRecordRequest) (*DomainResolutionRecordsResponse, error)
	// For Identifier
	CreateIdentityIdentifier(context.Context, *CreateIdentityIdentifierRequest) (*IdentityIdentifierResponse, error)
	DeleteIdentityIdentifier(context.Context, *IdentityIdentifierRequest) (*GeneralResponse, error)
	GetIdentityIdentifier(context.Context, *IdentityIdentifierRequest) (*IdentityIdentifierResponse, error)
	// For Data Identifier
	CreateDataIdentifier(context.Context, *CreateDataIdentifierRequest) (*DataIdentifierResponse, error)
	DeleteDataIdentifier(context.Context, *DataIdentifierRequest) (*GeneralResponse, error)
	GetDataIdentifier(context.Context, *DataIdentifierRequest) (*DataIdentifierResponse, error)
	FindDataIdentifierByMetadata(context.Context, *FindDataIdentifierByMetadataRequest) (*DataIdentifiersResponse, error)
	FindDataIdentifierByTag(context.Context, *FindDataIdentifierByTagRequest) (*DataIdentifiersResponse, error)
	mustEmbedUnimplementedEntropyServiceServer()
}

// UnimplementedEntropyServiceServer must be embedded to have forward compatible implementations.
type UnimplementedEntropyServiceServer struct {
}

func (UnimplementedEntropyServiceServer) AvailableNamespace(context.Context, *GeneralPaginationRequest) (*NamespacesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AvailableNamespace not implemented")
}
func (UnimplementedEntropyServiceServer) CurrentNamespace(context.Context, *GeneralRequest) (*NamespaceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CurrentNamespace not implemented")
}
func (UnimplementedEntropyServiceServer) ActivateNamespace(context.Context, *NamespaceRequest) (*GeneralResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ActivateNamespace not implemented")
}
func (UnimplementedEntropyServiceServer) CreateDomain(context.Context, *CreateDomainRequest) (*GeneralResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateDomain not implemented")
}
func (UnimplementedEntropyServiceServer) DeleteDomain(context.Context, *DomainRequest) (*GeneralResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteDomain not implemented")
}
func (UnimplementedEntropyServiceServer) GetDomain(context.Context, *DomainRequest) (*DomainResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDomain not implemented")
}
func (UnimplementedEntropyServiceServer) ListDomain(context.Context, *ListDomainRequest) (*DomainsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListDomain not implemented")
}
func (UnimplementedEntropyServiceServer) AddDomainResolutionRecord(context.Context, *CreateDomainResolutionRecordRequest) (*DomainResolutionRecordResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddDomainResolutionRecord not implemented")
}
func (UnimplementedEntropyServiceServer) UpdateDomainResolutionRecord(context.Context, *UpdateDomainResolutionRecordRequest) (*GeneralResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateDomainResolutionRecord not implemented")
}
func (UnimplementedEntropyServiceServer) DeleteDomainResolutionRecord(context.Context, *DomainResolutionRecordRequest) (*GeneralResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteDomainResolutionRecord not implemented")
}
func (UnimplementedEntropyServiceServer) GetDomainResolutionRecord(context.Context, *DomainResolutionRecordRequest) (*DomainResolutionRecordResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDomainResolutionRecord not implemented")
}
func (UnimplementedEntropyServiceServer) FindDomainResolutionRecord(context.Context, *FindDomainResolutionRecordRequest) (*DomainResolutionRecordsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindDomainResolutionRecord not implemented")
}
func (UnimplementedEntropyServiceServer) CreateIdentityIdentifier(context.Context, *CreateIdentityIdentifierRequest) (*IdentityIdentifierResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateIdentityIdentifier not implemented")
}
func (UnimplementedEntropyServiceServer) DeleteIdentityIdentifier(context.Context, *IdentityIdentifierRequest) (*GeneralResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteIdentityIdentifier not implemented")
}
func (UnimplementedEntropyServiceServer) GetIdentityIdentifier(context.Context, *IdentityIdentifierRequest) (*IdentityIdentifierResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetIdentityIdentifier not implemented")
}
func (UnimplementedEntropyServiceServer) CreateDataIdentifier(context.Context, *CreateDataIdentifierRequest) (*DataIdentifierResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateDataIdentifier not implemented")
}
func (UnimplementedEntropyServiceServer) DeleteDataIdentifier(context.Context, *DataIdentifierRequest) (*GeneralResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteDataIdentifier not implemented")
}
func (UnimplementedEntropyServiceServer) GetDataIdentifier(context.Context, *DataIdentifierRequest) (*DataIdentifierResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDataIdentifier not implemented")
}
func (UnimplementedEntropyServiceServer) FindDataIdentifierByMetadata(context.Context, *FindDataIdentifierByMetadataRequest) (*DataIdentifiersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindDataIdentifierByMetadata not implemented")
}
func (UnimplementedEntropyServiceServer) FindDataIdentifierByTag(context.Context, *FindDataIdentifierByTagRequest) (*DataIdentifiersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindDataIdentifierByTag not implemented")
}
func (UnimplementedEntropyServiceServer) mustEmbedUnimplementedEntropyServiceServer() {}

// UnsafeEntropyServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to EntropyServiceServer will
// result in compilation errors.
type UnsafeEntropyServiceServer interface {
	mustEmbedUnimplementedEntropyServiceServer()
}

func RegisterEntropyServiceServer(s grpc.ServiceRegistrar, srv EntropyServiceServer) {
	s.RegisterService(&EntropyService_ServiceDesc, srv)
}

func _EntropyService_AvailableNamespace_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GeneralPaginationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EntropyServiceServer).AvailableNamespace(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.EntropyService/AvailableNamespace",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EntropyServiceServer).AvailableNamespace(ctx, req.(*GeneralPaginationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EntropyService_CurrentNamespace_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GeneralRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EntropyServiceServer).CurrentNamespace(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.EntropyService/CurrentNamespace",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EntropyServiceServer).CurrentNamespace(ctx, req.(*GeneralRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EntropyService_ActivateNamespace_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NamespaceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EntropyServiceServer).ActivateNamespace(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.EntropyService/ActivateNamespace",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EntropyServiceServer).ActivateNamespace(ctx, req.(*NamespaceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EntropyService_CreateDomain_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateDomainRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EntropyServiceServer).CreateDomain(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.EntropyService/CreateDomain",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EntropyServiceServer).CreateDomain(ctx, req.(*CreateDomainRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EntropyService_DeleteDomain_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DomainRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EntropyServiceServer).DeleteDomain(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.EntropyService/DeleteDomain",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EntropyServiceServer).DeleteDomain(ctx, req.(*DomainRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EntropyService_GetDomain_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DomainRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EntropyServiceServer).GetDomain(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.EntropyService/GetDomain",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EntropyServiceServer).GetDomain(ctx, req.(*DomainRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EntropyService_ListDomain_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListDomainRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EntropyServiceServer).ListDomain(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.EntropyService/ListDomain",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EntropyServiceServer).ListDomain(ctx, req.(*ListDomainRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EntropyService_AddDomainResolutionRecord_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateDomainResolutionRecordRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EntropyServiceServer).AddDomainResolutionRecord(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.EntropyService/AddDomainResolutionRecord",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EntropyServiceServer).AddDomainResolutionRecord(ctx, req.(*CreateDomainResolutionRecordRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EntropyService_UpdateDomainResolutionRecord_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateDomainResolutionRecordRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EntropyServiceServer).UpdateDomainResolutionRecord(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.EntropyService/UpdateDomainResolutionRecord",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EntropyServiceServer).UpdateDomainResolutionRecord(ctx, req.(*UpdateDomainResolutionRecordRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EntropyService_DeleteDomainResolutionRecord_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DomainResolutionRecordRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EntropyServiceServer).DeleteDomainResolutionRecord(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.EntropyService/DeleteDomainResolutionRecord",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EntropyServiceServer).DeleteDomainResolutionRecord(ctx, req.(*DomainResolutionRecordRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EntropyService_GetDomainResolutionRecord_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DomainResolutionRecordRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EntropyServiceServer).GetDomainResolutionRecord(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.EntropyService/GetDomainResolutionRecord",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EntropyServiceServer).GetDomainResolutionRecord(ctx, req.(*DomainResolutionRecordRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EntropyService_FindDomainResolutionRecord_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindDomainResolutionRecordRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EntropyServiceServer).FindDomainResolutionRecord(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.EntropyService/FindDomainResolutionRecord",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EntropyServiceServer).FindDomainResolutionRecord(ctx, req.(*FindDomainResolutionRecordRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EntropyService_CreateIdentityIdentifier_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateIdentityIdentifierRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EntropyServiceServer).CreateIdentityIdentifier(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.EntropyService/CreateIdentityIdentifier",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EntropyServiceServer).CreateIdentityIdentifier(ctx, req.(*CreateIdentityIdentifierRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EntropyService_DeleteIdentityIdentifier_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IdentityIdentifierRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EntropyServiceServer).DeleteIdentityIdentifier(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.EntropyService/DeleteIdentityIdentifier",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EntropyServiceServer).DeleteIdentityIdentifier(ctx, req.(*IdentityIdentifierRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EntropyService_GetIdentityIdentifier_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IdentityIdentifierRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EntropyServiceServer).GetIdentityIdentifier(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.EntropyService/GetIdentityIdentifier",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EntropyServiceServer).GetIdentityIdentifier(ctx, req.(*IdentityIdentifierRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EntropyService_CreateDataIdentifier_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateDataIdentifierRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EntropyServiceServer).CreateDataIdentifier(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.EntropyService/CreateDataIdentifier",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EntropyServiceServer).CreateDataIdentifier(ctx, req.(*CreateDataIdentifierRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EntropyService_DeleteDataIdentifier_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DataIdentifierRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EntropyServiceServer).DeleteDataIdentifier(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.EntropyService/DeleteDataIdentifier",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EntropyServiceServer).DeleteDataIdentifier(ctx, req.(*DataIdentifierRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EntropyService_GetDataIdentifier_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DataIdentifierRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EntropyServiceServer).GetDataIdentifier(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.EntropyService/GetDataIdentifier",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EntropyServiceServer).GetDataIdentifier(ctx, req.(*DataIdentifierRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EntropyService_FindDataIdentifierByMetadata_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindDataIdentifierByMetadataRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EntropyServiceServer).FindDataIdentifierByMetadata(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.EntropyService/FindDataIdentifierByMetadata",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EntropyServiceServer).FindDataIdentifierByMetadata(ctx, req.(*FindDataIdentifierByMetadataRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EntropyService_FindDataIdentifierByTag_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindDataIdentifierByTagRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EntropyServiceServer).FindDataIdentifierByTag(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.EntropyService/FindDataIdentifierByTag",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EntropyServiceServer).FindDataIdentifierByTag(ctx, req.(*FindDataIdentifierByTagRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// EntropyService_ServiceDesc is the grpc.ServiceDesc for EntropyService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var EntropyService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "v1.EntropyService",
	HandlerType: (*EntropyServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AvailableNamespace",
			Handler:    _EntropyService_AvailableNamespace_Handler,
		},
		{
			MethodName: "CurrentNamespace",
			Handler:    _EntropyService_CurrentNamespace_Handler,
		},
		{
			MethodName: "ActivateNamespace",
			Handler:    _EntropyService_ActivateNamespace_Handler,
		},
		{
			MethodName: "CreateDomain",
			Handler:    _EntropyService_CreateDomain_Handler,
		},
		{
			MethodName: "DeleteDomain",
			Handler:    _EntropyService_DeleteDomain_Handler,
		},
		{
			MethodName: "GetDomain",
			Handler:    _EntropyService_GetDomain_Handler,
		},
		{
			MethodName: "ListDomain",
			Handler:    _EntropyService_ListDomain_Handler,
		},
		{
			MethodName: "AddDomainResolutionRecord",
			Handler:    _EntropyService_AddDomainResolutionRecord_Handler,
		},
		{
			MethodName: "UpdateDomainResolutionRecord",
			Handler:    _EntropyService_UpdateDomainResolutionRecord_Handler,
		},
		{
			MethodName: "DeleteDomainResolutionRecord",
			Handler:    _EntropyService_DeleteDomainResolutionRecord_Handler,
		},
		{
			MethodName: "GetDomainResolutionRecord",
			Handler:    _EntropyService_GetDomainResolutionRecord_Handler,
		},
		{
			MethodName: "FindDomainResolutionRecord",
			Handler:    _EntropyService_FindDomainResolutionRecord_Handler,
		},
		{
			MethodName: "CreateIdentityIdentifier",
			Handler:    _EntropyService_CreateIdentityIdentifier_Handler,
		},
		{
			MethodName: "DeleteIdentityIdentifier",
			Handler:    _EntropyService_DeleteIdentityIdentifier_Handler,
		},
		{
			MethodName: "GetIdentityIdentifier",
			Handler:    _EntropyService_GetIdentityIdentifier_Handler,
		},
		{
			MethodName: "CreateDataIdentifier",
			Handler:    _EntropyService_CreateDataIdentifier_Handler,
		},
		{
			MethodName: "DeleteDataIdentifier",
			Handler:    _EntropyService_DeleteDataIdentifier_Handler,
		},
		{
			MethodName: "GetDataIdentifier",
			Handler:    _EntropyService_GetDataIdentifier_Handler,
		},
		{
			MethodName: "FindDataIdentifierByMetadata",
			Handler:    _EntropyService_FindDataIdentifierByMetadata_Handler,
		},
		{
			MethodName: "FindDataIdentifierByTag",
			Handler:    _EntropyService_FindDataIdentifierByTag_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "magnolia.proto",
}

// TrustedLedgerServiceClient is the client API for TrustedLedgerService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TrustedLedgerServiceClient interface {
	Track(ctx context.Context, in *Event, opts ...grpc.CallOption) (*GeneralResponse, error)
	Trace(ctx context.Context, in *TracingRequest, opts ...grpc.CallOption) (*TracingResponse, error)
}

type trustedLedgerServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewTrustedLedgerServiceClient(cc grpc.ClientConnInterface) TrustedLedgerServiceClient {
	return &trustedLedgerServiceClient{cc}
}

func (c *trustedLedgerServiceClient) Track(ctx context.Context, in *Event, opts ...grpc.CallOption) (*GeneralResponse, error) {
	out := new(GeneralResponse)
	err := c.cc.Invoke(ctx, "/v1.TrustedLedgerService/Track", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *trustedLedgerServiceClient) Trace(ctx context.Context, in *TracingRequest, opts ...grpc.CallOption) (*TracingResponse, error) {
	out := new(TracingResponse)
	err := c.cc.Invoke(ctx, "/v1.TrustedLedgerService/Trace", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TrustedLedgerServiceServer is the server API for TrustedLedgerService service.
// All implementations must embed UnimplementedTrustedLedgerServiceServer
// for forward compatibility
type TrustedLedgerServiceServer interface {
	Track(context.Context, *Event) (*GeneralResponse, error)
	Trace(context.Context, *TracingRequest) (*TracingResponse, error)
	mustEmbedUnimplementedTrustedLedgerServiceServer()
}

// UnimplementedTrustedLedgerServiceServer must be embedded to have forward compatible implementations.
type UnimplementedTrustedLedgerServiceServer struct {
}

func (UnimplementedTrustedLedgerServiceServer) Track(context.Context, *Event) (*GeneralResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Track not implemented")
}
func (UnimplementedTrustedLedgerServiceServer) Trace(context.Context, *TracingRequest) (*TracingResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Trace not implemented")
}
func (UnimplementedTrustedLedgerServiceServer) mustEmbedUnimplementedTrustedLedgerServiceServer() {}

// UnsafeTrustedLedgerServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TrustedLedgerServiceServer will
// result in compilation errors.
type UnsafeTrustedLedgerServiceServer interface {
	mustEmbedUnimplementedTrustedLedgerServiceServer()
}

func RegisterTrustedLedgerServiceServer(s grpc.ServiceRegistrar, srv TrustedLedgerServiceServer) {
	s.RegisterService(&TrustedLedgerService_ServiceDesc, srv)
}

func _TrustedLedgerService_Track_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Event)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TrustedLedgerServiceServer).Track(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.TrustedLedgerService/Track",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TrustedLedgerServiceServer).Track(ctx, req.(*Event))
	}
	return interceptor(ctx, in, info, handler)
}

func _TrustedLedgerService_Trace_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TracingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TrustedLedgerServiceServer).Trace(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.TrustedLedgerService/Trace",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TrustedLedgerServiceServer).Trace(ctx, req.(*TracingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// TrustedLedgerService_ServiceDesc is the grpc.ServiceDesc for TrustedLedgerService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TrustedLedgerService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "v1.TrustedLedgerService",
	HandlerType: (*TrustedLedgerServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Track",
			Handler:    _TrustedLedgerService_Track_Handler,
		},
		{
			MethodName: "Trace",
			Handler:    _TrustedLedgerService_Trace_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "magnolia.proto",
}
