syntax = "proto3";

option java_multiple_files = true;
option java_package = "is.fuxi.magnolia";
option go_package = "/magnolia";

package magnolia;

// User registration and license management
service UserService {
  // List available namespaces before user registration
  rpc AvailableNamespace(GeneralPaginationRequest) returns (NamespacesResponse) {}

  // User registration
  rpc ApplyRegistrationCode(ApplyRegistrationCodeRequest) returns (ApplyRegistrationCodeResponse) {}
  rpc Register(UserRegistrationRequest) returns (UserRegistrationResponse) {}
  rpc Authenticate(UserAuthenticationRequest) returns (UserAuthenticationResponse) {}
  rpc Unregister(UserUnregisterRequest) returns (GeneralResponse) {}

  // License management
  rpc ListLicense(LicenseManagementRequest) returns (LicensesResponse) {}
  rpc CreateLicense(LicenseManagementRequest) returns (LicenseResponse) {}
  rpc RevokeLicense(RevokeLicenseRequest) returns (GeneralResponse) {}
}

/**
Domain management and identifier management.
User must provide the api license(key and secret) to execute the following operations.
 */
service EntropyService{
  // For TLD, when we using HLF, it seems like the channel in HLF.
  rpc AvailableNamespace(GeneralPaginationRequest) returns (NamespacesResponse) {}
  rpc CurrentNamespace(GeneralRequest) returns (NamespaceResponse) {}
  rpc ActivateNamespace(NamespaceRequest) returns (GeneralResponse) {}

  // For Domain
  rpc CreateDomain(CreateDomainRequest) returns (GeneralResponse) {}
  rpc DeleteDomain(DomainRequest) returns (GeneralResponse) {}
  rpc GetDomain(DomainRequest) returns (DomainResponse) {}
  rpc ListDomain(ListDomainRequest) returns (DomainsResponse) {}

  // For DNS RR
  rpc AddDomainResolutionRecord(CreateDomainResolutionRecordRequest) returns (DomainResolutionRecordResponse) {}
  rpc UpdateDomainResolutionRecord(UpdateDomainResolutionRecordRequest) returns (GeneralResponse) {}
  rpc DeleteDomainResolutionRecord(DomainResolutionRecordRequest) returns (GeneralResponse) {}
  rpc GetDomainResolutionRecord(DomainResolutionRecordRequest) returns (DomainResolutionRecordResponse) {}
  rpc FindDomainResolutionRecord(FindDomainResolutionRecordRequest) returns (DomainResolutionRecordsResponse) {}

  // For Identifier
  rpc CreateIdentityIdentifier(CreateIdentityIdentifierRequest) returns (IdentityIdentifierResponse) {}
  rpc DeleteIdentityIdentifier(IdentityIdentifierRequest) returns (GeneralResponse) {}
  rpc GetIdentityIdentifier(IdentityIdentifierRequest) returns (IdentityIdentifierResponse) {}

  // For Data Identifier
  rpc CreateDataIdentifier(CreateDataIdentifierRequest) returns (DataIdentifierResponse) {}
  rpc DeleteDataIdentifier(DataIdentifierRequest) returns (GeneralResponse) {}
  rpc GetDataIdentifier(DataIdentifierRequest) returns (DataIdentifierResponse) {}
  rpc GetDataIdentifiers(GeneralPaginationRequest) returns (DataIdentifiersResponse) {}
  rpc FindDataIdentifierByOwner(FindDataIdentifierByOwnerRequest) returns (DataIdentifiersResponse) {}
  rpc FindDataIdentifierByMetadata(FindDataIdentifierByMetadataRequest) returns (DataIdentifiersResponse) {}
  rpc FindDataIdentifierByTag(FindDataIdentifierByTagRequest) returns (DataIdentifiersResponse) {}
}

// Trusted service for tracking and tracing. User must use his federated-blockchain account to invoke these operations.
service TrustedLedgerService {
  rpc Track(Event) returns (GeneralResponse) {}
  rpc Trace(TracingRequest) returns (TracingResponse) {}
}

// Registration Code for registering user account
message ApplyRegistrationCodeRequest{
  string name = 1;
  string username = 2;
  string namespace = 3;
  CommunicationDestination communicationDestination = 4;
}

message CommunicationDestination {
  string data = 1;
  CommunicationType type = 2;
  enum CommunicationType{
    Default = 0;
    Mobile = 1;
    Email = 2;
  }
}

message ApplyRegistrationCodeResponse{
  Result result = 1;
  string clientID = 2;
  string registrationCode = 3;
}


message UserRegistrationRequest{
  string registrationCode = 1;
  string clientID = 2;
  string clientSecret = 3;
  string email = 4;
  string mobile = 5;
  string namespace = 6;
}

message UserRegistrationResponse{
  Result result = 1;
  User data = 2;
}

message User{
  string id = 1;
  string name = 2;
  string email = 3;
  string mobile = 4;
  bytes privateKey = 5;
  bytes publicKey = 6;
  string namespace = 7;
  string clientID = 8;
  string clientSecret = 9;
  int64 creationTime = 20;
  int64 lastModifiedTime = 21;
}

message UserAuthenticationRequest{
  string clientID = 1;
  string clientSecret = 2;
}

message UserAuthenticationResponse{
  Result result = 1;
  string accessToken = 2;
}


message UserUnregisterRequest{
  string clientID = 1;
  string accessToken = 2;
}

message LicenseManagementRequest{
  string clientID = 1;
  string accessToken = 2;
}

message RevokeLicenseRequest{
  string clientID = 1;
  string accessToken = 2;
  string licenseID = 3;
}

message License{
  string id = 1;
  string apiKey = 2;
  string apiSecret = 3;
  string clientID = 4;
}

message LicenseResponse{
  Result result = 1;
  License data = 2;
}

message LicensesResponse{
  Result result = 1;
  repeated License data = 2;
}

message Namespace{
  string id = 1;
  string name = 2;
  string owner = 3;
  string contractName = 4;
  string administrator = 5;
  int32  preference = 6;
  int64 creationTime = 7;
  int64 lastModifiedTime = 8;
}

message NamespaceRequest{
  string name = 1;
}

message NamespaceResponse{
  Result result = 1;
  Namespace data = 2;
}

message NamespacesResponse{
  Result result = 1;
  repeated Namespace data = 2;
}

message Domain{
  string name = 1;
  string registrant = 2;
  string registrar = 3;
  string namespace = 4;
  int64  creationTime = 5;
  int64 lastModifiedTime = 6;
  map<string, DomainResolutionRecord> rrs = 7;
}

message CreateDomainRequest{
  string name = 1;
  string registrant = 2;
}

message DomainRequest{
  string name = 1;
}

message DomainResponse{
  Result result = 1;
  Domain data = 2;
}

message DomainsResponse{
  Result result = 1;
  repeated Domain data = 2;
}

message DomainResolutionRecord{
  string id = 1;
  string name = 2;
  string domain = 3;
  DomainResolutionRecordType type = 4;
  uint32 ttl = 5;
  string registrant = 6;
  string registrar = 7;
  int64  creation_time = 8;
  int64  last_modified_time = 9;
  oneof data {
    RRData rr = 20;
    SOAData soa = 21;
    CertData cert = 22;
    URIData uri = 23;
    RPData rp = 24;
    MXData mx = 25;
  };
}

// Common Definition Area
enum DomainResolutionRecordType {
  NONE = 0;
  A = 1;
  NS = 2;
  CNAME = 5;
  SOA = 6;
  PTR = 12;
  MX = 15;
  TXT = 16;
  RP = 17;
  AAAA = 28;
  LOC = 29;
  SRV = 33;
  CERT = 37;
  URI = 256;
}

message RRData{
  string value = 1;
}

message CertData{
  string type = 1;
  string keyTag = 2;
  string algorithm = 3;
  string data = 4;
}

message SOAData{
  string masterNameserver = 1;
  string email = 2;
  uint32 serialNo = 3;
  uint32 refreshTime = 4;
  uint32 retryTime = 5;
  uint32 expireTime = 6;
  uint32 minTTL = 7;
}

message URIData{
  uint32 priority = 1;
  uint32 weight = 2;
  string target = 3;
}

message RPData{
  string mbox = 1;
  string rp = 2;
}

message MXData{
  uint32 preference = 1;
  string mx = 2;
}

message ListDomainRequest{
  string registrant = 1;
  Pagination pagination = 2;
}

message CreateDomainResolutionRecordRequest{
  string name = 1;
  string domain = 2;
  DomainResolutionRecordType type = 3;
  uint32 ttl = 4;
  oneof data {
    RRData rr = 20;
    SOAData soa = 21;
    CertData cert = 22;
    URIData uri = 23;
    RPData rp = 24;
    MXData mx = 25;
  };
}

message UpdateDomainResolutionRecordRequest{
  DomainResolutionRecord data = 1;
}

message DomainResolutionRecordRequest{
  string id = 1;
}

message FindDomainResolutionRecordRequest{
  string name = 1;
  DomainResolutionRecordType type = 2;
}

message DomainResolutionRecordResponse{
  Result result = 1;
  DomainResolutionRecord data = 2;
}

message DomainResolutionRecordsResponse{
  Result result = 1;
  repeated DomainResolutionRecord data = 2;
}

message IdentityIdentifier{
  string id = 1;
  string name = 2;
  string email = 3;
  bytes publicKey = 4;
  bytes signature = 5;
  int64 creationTime = 10;
  int64 lastModifiedTime = 11;
}

message CreateIdentityIdentifierRequest{
  string id = 1;
  string name = 2;
  string email = 3;
  bytes publicKey = 4;
  bytes signature = 5;
}

message IdentityIdentifierRequest{
  string name = 1;
}

message IdentityIdentifierResponse{
  Result result = 1;
  IdentityIdentifier data = 2;
}

enum SubscriptionType {
  Free = 0;
  Charged = 1;
}

message DataIdentifier{
  string id = 1;
  string name = 2;
  string dataAddress = 3;
  string dataDigest = 4;
  bytes dataSignature = 5;
  string authAddress = 6;
  string owner = 7;
  map<string, string> metadata = 9;
  repeated string tags = 10;
  SubscriptionType subscriptionType = 11;
}

message CreateDataIdentifierRequest{
  string name = 2;
  string dataAddress = 3;
  string dataDigest = 4;
  bytes dataSignature = 5;
  string authAddress = 6;
  string owner = 7;
  map<string, string> metadata = 9;
  repeated string tags = 10;
  SubscriptionType subscriptionType = 11;
}

message DataIdentifierRequest{
  string name = 1;
}

enum Operator {
  GT = 0;
  LT = 1;
  EQ = 2;
  LE = 3;
  GE = 4;
}

enum LogicalOperator {
  AND = 0;
  OR = 1;
}

message Criterion{
  string key = 1;
  Operator operator = 2;
  string value = 3;
}

message Criteria{
  LogicalOperator logicalType = 1;
  repeated Criterion criterions = 2;
}

message FindDataIdentifierByMetadataRequest{
  Criteria criteria = 1;
  Pagination pagination = 2;
}

message FindDataIdentifierByTagRequest{
  string tag = 1;
  Pagination pagination = 2;
}

message DataIdentifierResponse{
  Result result = 1;
  DataIdentifier data = 2;
}

message DataIdentifiersResponse{
  Result result = 1;
  repeated DataIdentifier data = 2;
}

// For blockchain service
message Event {
  string id = 1;
  string name = 2;
  string type = 3;
  string content = 4;
  string operator = 5;
  map<string, string> metadata = 6;
  string creationTime = 7;
}

message BlockchainTransactionRecord {
  string transactionId = 1;
  string dataHash = 2;
  string previousHash = 3;
  int64 timestamp = 4;
  uint64 height = 5;
  Event event = 6;
}

message TracingRequest{
  string eventId = 1;
}

message TracingResponse{
  Result result = 1;
  repeated BlockchainTransactionRecord data = 2;
}

// For common usage
message Pagination{
  int32 limit = 1;
  int32 offset = 2;
}

message GeneralPaginationRequest{
  Pagination pagination = 1;
}

message Result {
  int32 statusCode = 1;
  string message = 2;
}


message GeneralRequest{
  string clientID = 1;
}

message FindDataIdentifierByOwnerRequest{
  string id = 1;
  Pagination pagination = 2;
}

message GeneralResponse{
  Result result = 1;
}
